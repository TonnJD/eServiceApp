{"version":3,"sources":["./src/app/sqlite/sqlite.page.html","./src/app/sqlite/sqlite.module.ts","./src/app/sqlite/sqlite.page.scss","./src/app/sqlite/sqlite.page.ts"],"names":[],"mappings":"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","file":"sqlite-sqlite-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>\\r\\n      Ionic 4 SQLite\\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n \\r\\n<ion-content padding text-center>\\r\\n \\r\\n  <ion-button expand=\\\"block\\\" (click)=\\\"createDB()\\\">\\r\\n    Create DataBase\\r\\n  </ion-button>\\r\\n \\r\\n  <ion-button expand=\\\"block\\\" (click)=\\\"createTable()\\\">\\r\\n    Create Table\\r\\n  </ion-button>\\r\\n \\r\\n  <ion-button expand=\\\"block\\\" (click)=\\\"getRows()\\\">\\r\\n    Get Rows\\r\\n  </ion-button>\\r\\n \\r\\n \\r\\n  <ion-item-divider>\\r\\n    <ion-input placeholder=\\\"Enter Name\\\" [(ngModel)]=\\\"name_model\\\"></ion-input>\\r\\n    <ion-button expand=\\\"block\\\" (click)=\\\"insertRow()\\\">\\r\\n      Insert Row\\r\\n    </ion-button>\\r\\n  </ion-item-divider>\\r\\n \\r\\n \\r\\n \\r\\n  <ion-grid>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        Row ID\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        Name\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        Username\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        Position\\r\\n      </ion-col>\\r\\n      <!-- <ion-col>\\r\\n        position\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        Workall\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        Workfinish\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        empID\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        Delete\\r\\n      </ion-col> -->\\r\\n    </ion-row>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        {{data.empID}}\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        {{data.name}}\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        {{data.username}}\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        {{data.position}}\\r\\n      </ion-col>\\r\\n      <!-- <ion-col>\\r\\n        {{item.position}}\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        {{item.Workall}}\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        {{item.Workfinish}}\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        {{item.empID}}\\r\\n      </ion-col> -->\\r\\n      <ion-col>\\r\\n        <ion-button (click)=\\\"deleteRow()\\\" size=\\\"small\\\" color=\\\"danger\\\">\\r\\n          <ion-icon name=\\\"trash\\\"></ion-icon>\\r\\n        </ion-button>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n \\r\\n</ion-content>\\r\\n \"","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { SqlitePage } from './sqlite.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SqlitePage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [SqlitePage]\r\n})\r\nexport class SqlitePageModule {}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NxbGl0ZS9zcWxpdGUucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\r\nimport {  Platform } from '@ionic/angular';\r\n\r\n@Component({\r\n  selector: 'app-sqlite',\r\n  templateUrl: './sqlite.page.html',\r\n  styleUrls: ['./sqlite.page.scss'],\r\n})\r\nexport class SqlitePage implements OnInit {\r\n  \r\n  databaseObj: SQLiteObject; // Database instance object\r\n  name_model:string = \"test\"; // Input field model\r\n  username:string = \"test\"; // Input field model\r\n  row_data: any = []; // Table rows\r\n  readonly database_name:string = \"db.db\"; // DB name\r\n  readonly table_name:string = \"user\"; // Table name\r\n\r\n  // data = { name:\"123\", username:\"asd\", emp_id:\"25618\"};\r\ndata;\r\n  constructor(\r\n    private platform: Platform,\r\n    private sqlite: SQLite\r\n    ) { \r\n\r\n      this.data = [];\r\n\r\n      this.platform.ready().then(() => {\r\n        this.createDB();\r\n        this.createTable();\r\n      }).catch(error => {\r\n        console.log(error);\r\n      })\r\n\r\n    }\r\n\r\n    createDB() {\r\n      this.sqlite.create({\r\n        name: this.database_name,\r\n        location: 'default'\r\n      })\r\n        .then((db: SQLiteObject) => {\r\n          this.databaseObj = db;\r\n          alert('db Database Created!');\r\n        })\r\n        .catch(e => {\r\n          alert(\"error \" + JSON.stringify(e))\r\n        });\r\n    }\r\n  \r\n    createTable() {\r\n      this.databaseObj.executeSql('CREATE TABLE IF NOT EXISTS ' + this.table_name + ' (name varchar(50), username varchar(50), emp_id varchar(50), position varchar(50))', [])\r\n        .then(() => {\r\n          alert('Table Created!');\r\n        })\r\n        .catch(e => {\r\n          alert(\"error \" + JSON.stringify(e))\r\n        });\r\n    }\r\n   \r\n    insertRow() {\r\n      this.databaseObj.executeSql('INSERT INTO user VALUES (?,?,?,?)', [this.data.name,this.data.username,this.data.emp_id,this.data.empID])\r\n        .then(() => {\r\n          alert('Row Inserted!');\r\n          this.getRows();\r\n        })\r\n        .catch(e => {\r\n          alert(\"error \" + JSON.stringify(e))\r\n        });\r\n    }\r\n   \r\n    getRows() {\r\n      this.databaseObj.executeSql(\"SELECT * FROM \" + this.table_name, [])\r\n        .then((res) => {\r\n          this.row_data = [];\r\n          if (res.rows.length > 0) {\r\n            for (var i = 0; i < res.rows.length; i++) {\r\n              this.row_data.push(res.rows.item(i));\r\n              this.data.user = this.row_data.push(res.rows.item(i).user);\r\n              this.data.username = this.row_data.push(res.rows.item(i).username);\r\n              this.data.position = this.row_data.push(res.rows.item(i).position);\r\n              this.data.empID = this.row_data.push(res.rows.item(i).empID);\r\n              console.log(this.data.user);              \r\n            }\r\n          }\r\n        })\r\n        .catch(e => {\r\n          alert(\"error \" + JSON.stringify(e))\r\n        });\r\n    }\r\n   \r\n    deleteRow() {\r\n      this.databaseObj.executeSql(\"DELETE FROM \" + this.table_name + \" WHERE name = \" + this.data.name, [])\r\n        .then((res) => {\r\n          alert(\"Row Deleted!\");\r\n          this.getRows();\r\n        })\r\n        .catch(e => {\r\n          alert(\"error \" + JSON.stringify(e))\r\n        });\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}